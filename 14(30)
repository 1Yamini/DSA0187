#include <iostream>

// Class representing a pair of values of any data type
template<typename T1, typename T2>
class Pair {
private:
    T1 first;
    T2 second;

public:
    // Constructor
    Pair(const T1& f, const T2& s) : first(f), second(s) {}

    // Friend function to swap values of two Pair objects
    friend void swapPairValues(Pair<T1, T2>& pair1, Pair<T1, T2>& pair2) {
        std::swap(pair1.first, pair2.first);
        std::swap(pair1.second, pair2.second);
    }

    // Method to display the pair
    void display() const {
        std::cout << "(" << first << ", " << second << ")";
    }
};

// Template specialization for swapping Pair<int, int> objects
template<>
void swapPairValues(Pair<int, int>& pair1, Pair<int, int>& pair2) {
    // Swap values directly without using std::swap
    int tempFirst = pair1.first;
    pair1.first = pair2.first;
    pair2.first = tempFirst;

    int tempSecond = pair1.second;
    pair1.second = pair2.second;
    pair2.second = tempSecond;
}

int main() {
    // Testing generic Pair objects
    Pair<int, double> pair1(10, 3.14);
    Pair<int, double> pair2(20, 6.28);

    std::cout << "Before swapping:\n";
    std::cout << "Pair 1: ";
    pair1.display();
    std::cout << "\nPair 2: ";
    pair2.display();
    std::cout << "\n";

    swapPairValues(pair1, pair2);

    std::cout << "\nAfter swapping:\n";
    std::cout << "Pair 1: ";
    pair1.display();
    std::cout << "\nPair 2: ";
    pair2.display();
    std::cout << "\n";

    // Testing specialization for Pair<int, int>
    Pair<int, int> intPair1(1, 2);
    Pair<int, int> intPair2(3, 4);

    std::cout << "\nBefore swapping (int pairs):\n";
    std::cout << "Pair 1: ";
    intPair1.display();
    std::cout << "\nPair 2: ";
    intPair2.display();
    std::cout << "\n";

    swapPairValues(intPair1, intPair2);

    std::cout << "\nAfter swapping (int pairs):\n";
    std::cout << "Pair 1: ";
    intPair1.display();
    std::cout << "\nPair 2: ";
    intPair2.display();
    std::cout << "\n";

    return 0;
}
