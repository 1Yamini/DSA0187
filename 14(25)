#include <iostream>
using namespace std;
class Vector3D {
private:
    double x, y, z;

public:
    Vector3D(double x = 0, double y = 0, double z = 0) : x(x), y(y), z(z) {}
    Vector3D operator+(const Vector3D& v) const {
        return Vector3D(x + v.x, y + v.y, z + v.z);
    }
    Vector3D operator-(const Vector3D& v) const {
        return Vector3D(x - v.x, y - v.y, z - v.z);
    }
    Vector3D operator*(double scalar) const {
        return Vector3D(x * scalar, y * scalar, z * scalar);
    }
    Vector3D crossProduct(const Vector3D& v) const {
        return Vector3D(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);
    }
    void display() const {
        cout << "(" << x << ", " << y << ", " << z << ")" << endl;
    }
};
int main() {
    Vector3D vec1(1, 2, 3);
    Vector3D vec2(4, 5, 6);
    Vector3D sum = vec1 + vec2;
    cout << "Sum: ";
    sum.display();
    Vector3D diff = vec1 - vec2;
    cout << "Difference: ";
    diff.display();
    Vector3D scalarMult = vec1 * 2.0;
    cout << "Scalar Multiplication (vec1 * 2): ";
    scalarMult.display();
    Vector3D crossProd = vec1.crossProduct(vec2);
    cout << "Cross Product: ";
    crossProd.display();

    return 0;
}
