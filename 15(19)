#include <iostream>

class Matrix {
private:
    double matrix[2][2];

public:
    // Parameterized constructor
    Matrix(double a, double b, double c, double d) {
        matrix[0][0] = a;
        matrix[0][1] = b;
        matrix[1][0] = c;
        matrix[1][1] = d;
    }

    // Overloading the multiplication operator (*)
    Matrix operator*(const Matrix& other) const {
        Matrix result(0, 0, 0, 0);
        result.matrix[0][0] = matrix[0][0] * other.matrix[0][0] + matrix[0][1] * other.matrix[1][0];
        result.matrix[0][1] = matrix[0][0] * other.matrix[0][1] + matrix[0][1] * other.matrix[1][1];
        result.matrix[1][0] = matrix[1][0] * other.matrix[0][0] + matrix[1][1] * other.matrix[1][0];
        result.matrix[1][1] = matrix[1][0] * other.matrix[0][1] + matrix[1][1] * other.matrix[1][1];
        return result;
    }

    // Function to display the matrix
    void display() const {
        std::cout << "Matrix:" << std::endl;
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 2; ++j) {
                std::cout << matrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    // Creating two matrices
    Matrix matrix1(1, 2, 3, 4);
    Matrix matrix2(5, 6, 7, 8);

    // Multiplying two matrices
    Matrix result = matrix1 * matrix2;

    // Displaying the result
    result.display();

    return 0;
}
