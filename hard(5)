#include <iostream>
#include <stack>
#include <cctype>
#include <string>
#include <sstream>

int evaluateExpression(const std::string& expression);

int main() {
    std::string expression;
    std::cout << "Enter an expression: ";
    std::getline(std::cin, expression);

    try {
        int result = evaluateExpression(expression);
        std::cout << "Result: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cout << "Error evaluating expression: " << e.what() << std::endl;
    }

    return 0;
}

int evaluateExpression(const std::string& expression) {
    std::stack<int> values;
    std::stack<char> ops;

    for (int i = 0; i < expression.length(); i++) {
        if (expression[i] == ' ') {
            continue; // Skip spaces
        } else if (expression[i] == '(') {
            ops.push(expression[i]);
        } else if (isdigit(expression[i])) {
            int value = 0;
            // There may be more than one digit in the number
            while (i < expression.length() && isdigit(expression[i])) {
                value = (value * 10) + (expression[i] - '0');
                i++;
            }
            values.push(value);
            i--; // Since the for loop also increments i, decrement it here
        } else if (expression[i] == ')') {
            while (!ops.empty() && ops.top() != '(') {
                int val2 = values.top();
                values.pop();

                int val1 = values.top();
                values.pop();

                char op = ops.top();
                ops.pop();

                switch (op) {
                    case '+': values.push(val1 + val2); break;
                    case '-': values.push(val1 - val2); break;
                }
            }

            if (!ops.empty()) ops.pop(); // Remove '(' from the stack
        } else { // Operator encountered
            while (!ops.empty() && ops.top() != '(') {
                int val2 = values.top();
                values.pop();

                int val1 = values.top();
                values.pop();

                char op = ops.top();
                ops.pop();

                switch (op) {
                    case '+': values.push(val1 + val2); break;
                    case '-': values.push(val1 - val2); break;
                }
            }

            // Push current operator to ops stack
            ops.push(expression[i]);
        }
    }

    // Entire expression has been parsed, apply remaining ops to remaining values
    while (!ops.empty()) {
        int val2 = values.top();
        values.pop();

        int val1 = values.top();
        values.pop();

        char op = ops.top();
        ops.pop();

        switch (op) {
            case '+': values.push(val1 + val2); break;
            case '-': values.push(val1 - val2); break;
        }
    }

    // Top of 'values' contains result, return it
    return values.top();
}
