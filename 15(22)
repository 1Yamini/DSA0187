#include <iostream>

class Node {
public:
    int data;
    Node* next;

    // Constructor
    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    // Constructor to initialize the linked list with an array of elements
    LinkedList(int arr[], int size) : head(nullptr) {
        for (int i = 0; i < size; ++i) {
            append(arr[i]);
        }
    }

    // Destructor to free the memory allocated for the nodes
    ~LinkedList() {
        Node* current = head;
        while (current != nullptr) {
            Node* temp = current;
            current = current->next;
            delete temp;
        }
    }

    // Function to append a new node to the end of the linked list
    void append(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Function to display the elements of the linked list
    void display() const {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    // Initializing the linked list with an array of elements
    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);
    LinkedList list(arr, size);

    // Displaying the elements of the linked list
    list.display();

    return 0;
}
