#include <iostream>
using namespace std;

class Matrix {
private:
    int rows, cols;
    int **data; // Pointer to the 2D array

public:
    // Constructor
    Matrix(int r = 0, int c = 0) : rows(r), cols(c) {
        data = new int*[rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; j++) {
                data[i][j] = 0;
            }
        }
    }

    // Copy constructor for deep copy
    Matrix(const Matrix& other) : rows(other.rows), cols(other.cols) {
        data = new int*[rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; j++) {
                data[i][j] = other.data[i][j];
            }
        }
    }

    // Destructor
    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] data[i];
        }
        delete[] data;
    }

    // Overloading the addition operator
    Matrix operator+(const Matrix& other) const {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    // Overloading the subtraction operator
    Matrix operator-(const Matrix& other) const {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    // Overloading the multiplication operator
    Matrix operator*(const Matrix& other) const {
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.cols; j++) {
                for (int k = 0; k < cols; k++) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Function to fill the matrix with values
    void fillMatrix() {
        cout << "Enter elements for a " << rows << "x" << cols << " matrix:" << endl;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cin >> data[i][j];
            }
        }
    }

    // Function to display the matrix
    void display() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int rows, cols;

    // Creating and filling the first matrix
    cout << "Enter the number of rows and columns for Matrix 1: ";
    cin >> rows >> cols;
    Matrix m1(rows, cols);
    m1.fillMatrix();

    // Creating and filling the second matrix
    cout << "Enter the number of rows and columns for Matrix 2: ";
    cin >> rows >> cols;
    Matrix m2(rows, cols);
    m2.fillMatrix();

    // Performing operations
    Matrix sum = m1 + m2;
    Matrix difference = m1 - m2;
    Matrix product = m1 * m2;

    cout << "Matrix 1:" << endl;
    m1.display();

    cout << "Matrix 2:" << endl;
    m2.display();

    cout << "Sum of Matrix 1 and Matrix 2:" << endl;
    sum.display();

    cout << "Difference (Matrix 1 - Matrix 2):" << endl;
    difference.display();

    cout << "Product of Matrix 1 and Matrix 2:" << endl;
    product.display();

    return 0;
}
